import logging
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes
)
import os
from threading import Thread
from flask import Flask
from dotenv import load_dotenv
import asyncio
import time
from datetime import datetime
import requests

def keep_alive():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞—Å—ã–ø–∞–ª –Ω–∞ Render.
    """
    while True:
        try:
            # –ó–∞–º–µ–Ω–∏—Ç–µ URL –Ω–∞ –≤–∞—à (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://)
            url = "https://bussines-bot-telegq.onrender.com"  
            response = requests.get(url)
            print(f"Keep-alive –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ keep-alive: {e}")
        time.sleep(300)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)

# –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
Thread(target=keep_alive, daemon=True).start()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

class Config:
    SHOP_NAME = "üöÇ Balon Rails Shop | Premium –º–∞–≥–∞–∑–∏–Ω –¥–ª—è Dead Rails"
    SUPPORT_USERNAME = "@Balon_Manager"
    REVIEWS_CHANNEL = "https://t.me/BalonRails"
    PAYMENT_DETAILS = "–°–±–µ—Ä–±–∞–Ω–∫: 2202208334143592"
    
    # –£—Å–ª—É–≥–∏ —Å —Ü–µ–Ω–∞–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
    SERVICES = {
        "–í—Å–µ –∫–ª–∞—Å—Å—ã –∏ –ø–æ–µ–∑–¥–∞ - 90‚ÇΩ": {
            "price": 90,
            "emoji": "‚ñ™Ô∏è‚ñ´Ô∏è‚ñ™Ô∏è",
            "desc": "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º –∏ –ø–æ–µ–∑–¥–∞–º"
        },
        "80–∫–º –∑–∞ 5 –º–∏–Ω—É—Ç - 40‚ÇΩ": {
            "price": 40,
            "emoji": "‚ñ´Ô∏è‚ñ´Ô∏è‚ñ™Ô∏è",
            "desc": "–ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ –∏–≥—Ä–µ"
        },
        "–§–∞—Ä–º –±–æ–Ω–¥ (—Å –∑–∞—Ö–æ–¥–æ–º –Ω–∞ –∞–∫–∫)": {
            "price": 0.20,
            "emoji": "‚ñ´Ô∏è.‚ñ´Ô∏è‚ñ´Ô∏è‚ñ™Ô∏è",
            "desc": "1 –±–æ–Ω–¥ = 0.20‚ÇΩ (—É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)"
        }
    }
    
    # –ê–∫–∫–∞—É–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
    ACCOUNTS = {
        "–ê–∫–∫–∞—É–Ω—Ç (–µ—Å—Ç—å –≤—Å–µ) - 79‚ÇΩ": {
            "price": 79,
            "emoji": "‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è",
            "desc": "–ê–∫–∫–∞—É–Ω—Ç —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º"
        },
        "–ê–∫–∫–∞—É–Ω—Ç —Å 5000 –±–æ–Ω–¥ - 169‚ÇΩ": {
            "price": 169,
            "emoji": "‚ñ™Ô∏è‚ñ´Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è",
            "desc": "–ê–∫–∫–∞—É–Ω—Ç + 5000 –±–æ–Ω–¥–æ–≤"
        },
        "–ê–∫–∫–∞—É–Ω—Ç —Å 10000 –±–æ–Ω–¥ - 299‚ÇΩ": {
            "price": 299,
            "emoji": "‚ñ´Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è",
            "desc": "–ê–∫–∫–∞—É–Ω—Ç + 10000 –±–æ–Ω–¥–æ–≤"
        },
        "–ê–∫–∫–∞—É–Ω—Ç —Å 15000 –±–æ–Ω–¥ - 399‚ÇΩ": {
            "price": 399,
            "emoji": "‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è",
            "desc": "–ê–∫–∫–∞—É–Ω—Ç + 15000 –±–æ–Ω–¥–æ–≤"
        }
    }

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
class States:
    BUY, SERVICE, ACCOUNT, CURRENCY_AMOUNT = range(4)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserData:
    _data = {}
    
    @classmethod
    def get_user(cls, user_id: int):
        if user_id not in cls._data:
            cls._data[user_id] = {
                'purchases': 0,
                'first_purchase': None,
                'last_purchase': None
            }
        return cls._data[user_id]
    
    @classmethod
    def add_purchase(cls, user_id: int):
        user = cls.get_user(user_id)
        user['purchases'] += 1
        now = datetime.now().strftime("%d.%m.%Y %H:%M")
        if not user['first_purchase']:
            user['first_purchase'] = now
        user['last_purchase'] = now

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
class Keyboards:
    @staticmethod
    def main_menu():
        return ReplyKeyboardMarkup([
            ["üõí –ö—É–ø–∏—Ç—å", "‚≠ê –û—Ç–∑—ã–≤—ã"],
            ["üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"]
        ], resize_keyboard=True)
    
    @staticmethod
    def buy_menu():
        return ReplyKeyboardMarkup([
            ["üéÆ –£—Å–ª—É–≥–∏", "üë• –ê–∫–∫–∞—É–Ω—Ç—ã"],
            ["üîô –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True)
    
    @staticmethod
    def services_menu():
        return ReplyKeyboardMarkup(
            [[service] for service in Config.SERVICES.keys()] + [["üîô –ù–∞–∑–∞–¥"]],
            resize_keyboard=True
        )
    
    @staticmethod
    def accounts_menu():
        return ReplyKeyboardMarkup(
            [[account] for account in Config.ACCOUNTS.keys()] + [["üîô –ù–∞–∑–∞–¥"]],
            resize_keyboard=True
        )
    
    @staticmethod
    def cancel_menu():
        return ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    
    @staticmethod
    def back_menu():
        return ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
    
    @staticmethod
    def back_to_main_menu():
        return ReplyKeyboardMarkup([["üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 5000)))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"""üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {Config.SHOP_NAME}!</b> üåü

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–≥—Ä–æ–≤—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è Rail Nation.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:""",
        parse_mode='HTML',
        reply_markup=Keyboards.main_menu()
    )
    return ConversationHandler.END

async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        """üõí <b>–ú–µ–Ω—é –ø–æ–∫—É–ø–æ–∫</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:""",
        parse_mode='HTML',
        reply_markup=Keyboards.buy_menu()
    )
    return States.BUY

async def handle_buy_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if "–£—Å–ª—É–≥–∏" in text:
        await update.message.reply_text(
            """üéÆ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:""",
            parse_mode='HTML',
            reply_markup=Keyboards.services_menu()
        )
        return States.SERVICE
    elif "–ê–∫–∫–∞—É–Ω—Ç—ã" in text:
        await update.message.reply_text(
            """üë• <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:""",
            parse_mode='HTML',
            reply_markup=Keyboards.accounts_menu()
        )
        return States.ACCOUNT
    elif "–ù–∞–∑–∞–¥" in text:
        await start(update, context)
        return ConversationHandler.END
    
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é")
    return States.BUY

async def handle_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    service = update.message.text
    
    if "–ù–∞–∑–∞–¥" in service:
        await buy(update, context)
        return States.BUY
    
    if service in Config.SERVICES:
        service_info = Config.SERVICES[service]
        if "–§–∞—Ä–º –±–æ–Ω–¥" in service:
            context.user_data['selected_service'] = {
                'name': service,
                'price': service_info['price'],
                'type': 'bond'
            }
            await update.message.reply_text(
                """üíµ <b>–§–∞—Ä–º –±–æ–Ω–¥–æ–≤</b>

1 –±–æ–Ω–¥ = 0.20‚ÇΩ
–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω–¥–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:""",
                parse_mode='HTML',
                reply_markup=Keyboards.cancel_menu()
            )
            return States.CURRENCY_AMOUNT
        else:
            await update.message.reply_text(
                f"""‚úÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏:</b> {service}
üìù {service_info['desc']}

üí∏ <b>–¶–µ–Ω–∞:</b> {service_info['price']}‚ÇΩ

üìå <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>
{Config.PAYMENT_DETAILS}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.""",
                parse_mode='HTML',
                reply_markup=Keyboards.back_to_main_menu()
            )
            UserData.add_purchase(update.message.from_user.id)
            return ConversationHandler.END
    
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
    return States.SERVICE

async def handle_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    account = update.message.text
    
    if "–ù–∞–∑–∞–¥" in account:
        await buy(update, context)
        return States.BUY
    
    if account in Config.ACCOUNTS:
        account_info = Config.ACCOUNTS[account]
        await update.message.reply_text(
            f"""‚úÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏:</b> {account}
üìù {account_info['desc']}

üí∏ <b>–¶–µ–Ω–∞:</b> {account_info['price']}‚ÇΩ

üìå <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>
{Config.PAYMENT_DETAILS}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.""",
            parse_mode='HTML',
            reply_markup=Keyboards.back_to_main_menu()
        )
        UserData.add_purchase(update.message.from_user.id)
        return ConversationHandler.END
    
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
    return States.ACCOUNT

async def handle_currency_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "–û—Ç–º–µ–Ω–∞" in update.message.text:
        await buy(update, context)
        return States.BUY
    
    try:
        amount = int(update.message.text)
        service = context.user_data['selected_service']
        
        if service['type'] == 'bond':
            total_price = amount * service['price']
            await update.message.reply_text(
                f"""üíµ <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</b>

–í—ã –∑–∞–∫–∞–∑–∞–ª–∏: {amount} –±–æ–Ω–¥–æ–≤
–¶–µ–Ω–∞ –∑–∞ 1 –±–æ–Ω–¥: 0.20‚ÇΩ
–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price:.2f}‚ÇΩ

üìå <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>
{Config.PAYMENT_DETAILS}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.""",
                parse_mode='HTML',
                reply_markup=Keyboards.back_to_main_menu()
            )
            UserData.add_purchase(update.message.from_user.id)
            return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return States.CURRENCY_AMOUNT

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        """üÜò <b>–¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:
- –° –æ–ø–ª–∞—Ç–æ–π –∑–∞–∫–∞–∑–∞
- –° –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
- –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã

–ò–ª–∏ –≤—ã —É–∂–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –∏ –æ–∂–∏–¥–∞–µ—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!

‚è≥ <b>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> 5-15 –º–∏–Ω—É—Ç (10:00-22:00 –ú–°–ö)
üì© <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> @{}

<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ:</b>
1. –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã
2. –í–∞—à Telegram ID
3. –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!""".format(Config.SUPPORT_USERNAME),
        parse_mode='HTML',
        reply_markup=Keyboards.back_to_main_menu()
    )
    return ConversationHandler.END

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_data = UserData.get_user(user_id)
    
    status = "ü•â –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç"
    if user_data['purchases'] >= 10:
        status = "ü•á VIP –∫–ª–∏–µ–Ω—Ç"
    elif user_data['purchases'] >= 3:
        status = "ü•à –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç"
    
    await update.message.reply_text(
        f"""üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üÜî ID: <code>{user_id}</code>
üìä –°—Ç–∞—Ç—É—Å: {status}
üì¶ –°–æ–≤–µ—Ä—à–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫: {user_data['purchases']}

üìÖ –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞: {user_data['first_purchase'] or '–µ—â–µ –Ω–µ—Ç'}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞: {user_data['last_purchase'] or '–µ—â–µ –Ω–µ—Ç'}

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
- –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∞—à ID –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–º–æ—â–∏
- –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å—Ä–∞–∑—É –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
- –ß–µ–º –±–æ–ª—å—à–µ –ø–æ–∫—É–ø–æ–∫ - –≤—ã—à–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å!""",
        parse_mode='HTML',
        reply_markup=Keyboards.back_to_main_menu()
    )
    return ConversationHandler.END

async def reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        """‚≠ê <b>–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</b>

–ú—ã —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–æ—Ä–æ–∂–∏–º —Å–≤–æ–µ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π!

üì¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏: {}
(–†–µ–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –≤–∏–¥–µ–æ–æ—Ç—á–µ—Ç—ã)

üí¨ <b>–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–∑—ã–≤–æ–≤:</b>
- "–ó–∞–∫–∞–∑–∞–ª –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–ª—É—á–∏–ª —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!"
- "–õ—É—á—à–∏–π –º–∞–≥–∞–∑–∏–Ω –ø–æ Rail Nation, –≤—Å–µ —á–µ—Å—Ç–Ω–æ!"
- "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–ª–∞ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∑–∞ 5 –º–∏–Ω—É—Ç"

–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –≤—ã —Ç–æ–∂–µ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É!""".format(Config.REVIEWS_CHANNEL),
        parse_mode='HTML',
        reply_markup=Keyboards.back_to_main_menu()
    )
    return ConversationHandler.END

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)
    return ConversationHandler.END

async def run_bot():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex('^(‚≠ê –û—Ç–∑—ã–≤—ã)$'), reviews))
    application.add_handler(MessageHandler(filters.Regex('^(üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞)$'), support))
    application.add_handler(MessageHandler(filters.Regex('^(üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å)$'), profile))
    application.add_handler(MessageHandler(filters.Regex('^(üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$'), back_to_main))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∫—É–ø–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^(üõí –ö—É–ø–∏—Ç—å)$'), buy)],
        states={
            States.BUY: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    handle_buy_menu
                ),
            ],
            States.SERVICE: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    handle_service
                ),
            ],
            States.ACCOUNT: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    handle_account
                ),
            ],
            States.CURRENCY_AMOUNT: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    handle_currency_amount
                ),
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(filters.Regex('^(üîô –ù–∞–∑–∞–¥|‚ùå –û—Ç–º–µ–Ω–∞|üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$'), start),
            MessageHandler(filters.Regex('^(üõí –ö—É–ø–∏—Ç—å)$'), buy)
        ],
        allow_reentry=True,
        per_user=True,
        per_chat=True
    )
    
    application.add_handler(conv_handler)
    
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    
    return application

async def shutdown(application):
    await application.updater.stop()
    await application.stop()
    await application.shutdown()

def main():
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_flask, daemon=True).start()
    
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            application = loop.run_until_complete(run_bot())
            loop.run_forever()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}")
            if 'application' in locals():
                loop.run_until_complete(shutdown(application))
            logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            if 'application' in locals():
                loop.run_until_complete(shutdown(application))
            break
        finally:
            loop.close()

if __name__ == '__main__':
    main()
